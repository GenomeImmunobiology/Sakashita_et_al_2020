#!/usr/bin/env python

'''
Copyright (c) 2020 RIKEN
All Rights Reserved.
See file LICENSE for details.
'''

# description: convert 'mm10.fa.out.gz' to gtf file 'mm10.fa.out.high_sw_score.gtf'
# 'mm10.fa.out.gz' was downloaded from 'http://www.repeatmasker.org/species/mm.html'
# usage: python %prog
# Python 3.7.4


import gzip


sw_threshold=1001  # threshold of SW score for TEs other than SINEs and DNA transposons
sw_threshold_for_sine_dna=501  # threshold of SW score for SINEs and DNA transposons


def convert_to_gtf(lis, d_clas, d_subc):
    gtf=[]
    if not ls[10] in d_clas:
        d_clas[ls[10]]=0
    else:
        d_clas[ls[10]] += 1
    if not ls[9] in d_subc:
        d_subc[ls[9]]=0
    else:
        d_subc[ls[9]] += 1
    strand='+' if ls[8] == '+' else '-'
    gene_id='%s,%d,%s,%d' % (ls[10], d_clas[ls[10]], ls[9], d_subc[ls[9]])
    attr='gene_id "%s"; gene_type "lncRNA"; gene_name "%s"; level 3; sw_score "%s";' % (gene_id, gene_id, ls[0])
    tmp=[ls[4], 'Custom', 'gene', ls[5], ls[6], '.', strand, '.', attr]
    gtf.append('\t'.join(tmp))
    attr='gene_id "%s"; transcript_id "%s"; gene_type "lncRNA"; gene_name "%s"; transcript_type "lncRNA"; transcript_name "%s-1"; level 3; transcript_support_level "NA"; sw_score "%s";' % (gene_id, gene_id, gene_id, gene_id, ls[0])
    tmp=[ls[4], 'Custom', 'transcript', ls[5], ls[6], '.', strand, '.', attr]
    gtf.append('\t'.join(tmp))
    attr='gene_id "%s"; transcript_id "%s"; gene_type "lncRNA"; gene_name "%s"; transcript_type "lncRNA"; transcript_name "%s-1"; exon_number 1; exon_id "e_%s"; level 3; transcript_support_level "NA"; sw_score "%s";' % (gene_id, gene_id, gene_id, gene_id, gene_id, ls[0])
    tmp=[ls[4], 'Custom', 'exon', ls[5], ls[6], '.', strand, '.', attr]
    gtf.append('\t'.join(tmp))
    return d_clas, d_subc, '\n'.join(gtf) +'\n'


f='mm10.fa.out.gz'
id=0
d_clas,d_subc={},{}
header='##description: mm10 TE annotation generated by Shohei KOJIMA\n'
with open('mm10.fa.out.high_sw_score.gtf', 'w') as outfile:
    outfile.write(header)
    with gzip.open(f) as infile:
        for _ in range(3):
            next(infile)
        for line in infile:
            line=line.decode()
            ls=line.split()
            if not ls[10] == 'Simple_repeat':
                if ('SINE/' in ls[10]) or ('DNA/' in ls[10]):
                    if int(ls[0]) >= sw_threshold_for_sine_dna:
                        d_clas,d_subc,gtf=convert_to_gtf(ls, d_clas, d_subc)
                        outfile.write(gtf)
                else:
                    if int(ls[0]) >= sw_threshold:
                        d_clas,d_subc,gtf=convert_to_gtf(ls, d_clas, d_subc)
                        outfile.write(gtf)

